{"ast":null,"code":"var _jsxFileName = \"/Users/jeewoonkim/Documents/GitHub/react_quiz/src/contexts/quiz.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from \"react\";\nimport questions from \"../data\";\nimport { shuffleAnswers } from \"../helper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  currentQuestionIndex: 0,\n  questions,\n  showResults: false,\n  answers: shuffleAnswers(questions[0]),\n  currentAnswer: '',\n  correctAnswersCount: 0\n};\nconst reducer = (state, action) => {\n  console.log('reducer', state, action);\n  switch (action.type) {\n    case 'NEXT_QUESTION':\n      {\n        const showResults = state.currentQuestionIndex === state.questions.length - 1;\n        const currentQuestionIndex = showResults ? state.currentQuestionIndex : state.currentQuestionIndex + 1;\n        const answers = showResults ? [] : shuffleAnswers(state.questions[currentQuestionIndex]);\n        return {\n          ...state,\n          currentQuestionIndex,\n          showResults,\n          answers,\n          currentAnswer: \"\"\n        };\n      }\n    case 'RESTART':\n      {\n        return initialState;\n      }\n    case 'SELECT_ANSWER':\n      {\n        const correctAnswersCount = action.payload === state.questions[state.currentQuestionIndex].correctAnswer ? state.correctAnswersCount + 1 : state.correctAnswersCount;\n        return {\n          ...state,\n          currentAnswer: action.payload\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n  ;\n};\nexport const QuizContext = /*#__PURE__*/createContext();\nexport const QuizProvider = ({\n  children\n}) => {\n  _s();\n  const value = useReducer(reducer, initialState);\n  console.log(\"state\", value);\n  return /*#__PURE__*/_jsxDEV(QuizContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 12\n  }, this);\n};\n_s(QuizProvider, \"HDl9A1duRDI+maTNi9v2R1p+EwQ=\");\n_c = QuizProvider;\nvar _c;\n$RefreshReg$(_c, \"QuizProvider\");","map":{"version":3,"names":["createContext","useReducer","questions","shuffleAnswers","jsxDEV","_jsxDEV","initialState","currentQuestionIndex","showResults","answers","currentAnswer","correctAnswersCount","reducer","state","action","console","log","type","length","payload","correctAnswer","QuizContext","QuizProvider","children","_s","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jeewoonkim/Documents/GitHub/react_quiz/src/contexts/quiz.js"],"sourcesContent":["import { createContext, useReducer } from \"react\";\nimport questions from \"../data\";\nimport { shuffleAnswers } from \"../helper\";\n\nconst initialState = {\n    currentQuestionIndex: 0,\n    questions,\n    showResults: false,\n    answers: shuffleAnswers(questions[0]),\n    currentAnswer: '',\n    correctAnswersCount: 0,\n};\n\nconst reducer = (state, action) => {\n    console.log('reducer', state, action);\n    switch (action.type) {\n        case 'NEXT_QUESTION': {\n            const showResults = state.currentQuestionIndex === state.questions.length - 1;\n            const currentQuestionIndex = showResults ? state.currentQuestionIndex : state.currentQuestionIndex + 1;\n            const answers = showResults ? [] : shuffleAnswers(state.questions[currentQuestionIndex]);\n            return {\n                ...state,\n                currentQuestionIndex,\n                showResults,\n                answers,\n                currentAnswer: \"\",\n            };\n        }\n\n        case 'RESTART': {\n            return initialState;\n        }\n        \n        case 'SELECT_ANSWER': {\n            const correctAnswersCount = action.payload === state.questions[state.currentQuestionIndex].correctAnswer ? state.correctAnswersCount + 1: state.correctAnswersCount\n            return {\n                ...state,\n                currentAnswer: action.payload,\n            };\n        }\n\n        default: {\n            return state;\n        }\n    };\n};\n\n\nexport const QuizContext = createContext();\n\nexport const QuizProvider = ({children}) => {\n    const value = useReducer(reducer, initialState);\n    console.log(\"state\", value);\n    return <QuizContext.Provider value={value}>{children}</QuizContext.Provider>\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACjD,OAAOC,SAAS,MAAM,SAAS;AAC/B,SAASC,cAAc,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,YAAY,GAAG;EACjBC,oBAAoB,EAAE,CAAC;EACvBL,SAAS;EACTM,WAAW,EAAE,KAAK;EAClBC,OAAO,EAAEN,cAAc,CAACD,SAAS,CAAC,CAAC,CAAC,CAAC;EACrCQ,aAAa,EAAE,EAAE;EACjBC,mBAAmB,EAAE;AACzB,CAAC;AAED,MAAMC,OAAO,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC/BC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,KAAK,EAAEC,MAAM,CAAC;EACrC,QAAQA,MAAM,CAACG,IAAI;IACf,KAAK,eAAe;MAAE;QAClB,MAAMT,WAAW,GAAGK,KAAK,CAACN,oBAAoB,KAAKM,KAAK,CAACX,SAAS,CAACgB,MAAM,GAAG,CAAC;QAC7E,MAAMX,oBAAoB,GAAGC,WAAW,GAAGK,KAAK,CAACN,oBAAoB,GAAGM,KAAK,CAACN,oBAAoB,GAAG,CAAC;QACtG,MAAME,OAAO,GAAGD,WAAW,GAAG,EAAE,GAAGL,cAAc,CAACU,KAAK,CAACX,SAAS,CAACK,oBAAoB,CAAC,CAAC;QACxF,OAAO;UACH,GAAGM,KAAK;UACRN,oBAAoB;UACpBC,WAAW;UACXC,OAAO;UACPC,aAAa,EAAE;QACnB,CAAC;MACL;IAEA,KAAK,SAAS;MAAE;QACZ,OAAOJ,YAAY;MACvB;IAEA,KAAK,eAAe;MAAE;QAClB,MAAMK,mBAAmB,GAAGG,MAAM,CAACK,OAAO,KAAKN,KAAK,CAACX,SAAS,CAACW,KAAK,CAACN,oBAAoB,CAAC,CAACa,aAAa,GAAGP,KAAK,CAACF,mBAAmB,GAAG,CAAC,GAAEE,KAAK,CAACF,mBAAmB;QACnK,OAAO;UACH,GAAGE,KAAK;UACRH,aAAa,EAAEI,MAAM,CAACK;QAC1B,CAAC;MACL;IAEA;MAAS;QACL,OAAON,KAAK;MAChB;EACJ;EAAC;AACL,CAAC;AAGD,OAAO,MAAMQ,WAAW,gBAAGrB,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMsB,YAAY,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAMC,KAAK,GAAGxB,UAAU,CAACW,OAAO,EAAEN,YAAY,CAAC;EAC/CS,OAAO,CAACC,GAAG,CAAC,OAAO,EAAES,KAAK,CAAC;EAC3B,oBAAOpB,OAAA,CAACgB,WAAW,CAACK,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAF,QAAA,EAAEA;EAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAChF,CAAC;AAAAN,EAAA,CAJYF,YAAY;AAAAS,EAAA,GAAZT,YAAY;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}